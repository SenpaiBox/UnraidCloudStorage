#!/bin/bash

#######################
#### Mount Script  ####
#######################
#### Version 1.3.1 ####
#######################

# CONFIGURE
REMOTE="googledrive" # Name of rclone remote mount NOTE: Choose your encrypted remote for sensitive data
MEDIA="media" # Local share name NOTE: The name you want to give your share mount
MEDIAROOT="/mnt/user" # Local share directory

#########################################
#### DO NOT EDIT ANYTHING BELOW THIS ####
#########################################

# Create variables
APPDATA="/mnt/user/appdata/rclonedata/$MEDIA" # Rclone data folder location NOTE: Best not to touch this or map anything here
RCLONEUPLOAD="$APPDATA/rclone_upload" # Staging folder of files to be uploaded
RCLONEMOUNT="$APPDATA/rclone_mount" # Rclone mount folder
MERGERFSMOUNT="$MEDIAROOT/$MEDIA" # Media share location
LOCKFILE="$APPDATA/mount.lock" # Rclone mount lock file
MERGERFSOPTIONS="rw,use_ino,allow_other,func.getattr=newest,category.action=all,category.create=ff,cache.files=auto-full" # Mergerfs mount options

# Create directories
mkdir -p $APPDATA $RCLONEUPLOAD $RCLONEMOUNT $MERGERFSMOUNT

# Check if script is already running
echo "==== STARTING MOUNT SCRIPT ===="
echo "$(date "+%d/%m/%Y %T") INFO: Checking if script is already running"
if [ -f "$LOCKFILE" ]; then
    echo "SUCCESS: $(date "+%d/%m/%Y %T") - Check Passed! Your Cloud Drive is already mounted"
    exit
else
    touch "$LOCKFILE"
fi

# Check if rclone mount already created
if [ -n "$(ls -A $RCLONEMOUNT)" ]; then
    echo "$(date "+%d/%m/%Y %T") WARN: Rclone is mounted"
else
    echo "$(date "+%d/%m/%Y %T") INFO: Mounting Rclone, please wait..."
    # Rclone mount command and flags
    rclone mount \
    --log-level INFO \
    --allow-other \
    --dir-cache-time 1000h \
    --buffer-size 256M \
    --drive-chunk-size 512 \
    --vfs-read-chunk-size 128M \
    --vfs-read-chunk-size-limit off \
    --vfs-cache-mode writes \
    $REMOTE: $RCLONEMOUNT &
    
    # Check if mount successful
    echo "$(date "+%d/%m/%Y %T") INFO: Mount in progress please wait..."
    sleep 5
    echo "$(date "+%d/%m/%Y %T") INFO: Proceeding..."
    if [ "$(ls -A $RCLONEMOUNT)" ]; then
        echo "$(date "+%d/%m/%Y %T") SUCCESS: Check Passed! remote mounted"
    else
        echo "$(date "+%d/%m/%Y %T") ERROR: Check Failed! please check your configuration"
        rm -f "$LOCKFILE"
        exit
    fi
fi

# Check media share mount
if [ -n "$(ls -A $MERGERFSMOUNT)" ]; then
    echo "$(date "+%d/%m/%Y %T") SUCCESS: Check Passed! Your Cloud Drive is mounted"
else
    # Check if mergerfs is installed
    if [ -x "$(command -v mergerfs)" ]; then
        echo "$(date "+%d/%m/%Y %T") INFO: Mergerfs found, Proceeding..."
    else
        mkdir -p $APPDATA/mergerfs
        docker run -v $APPDATA/mergerfs:/build --rm trapexit/mergerfs-static-build >/dev/null
        mv $APPDATA/mergerfs/mergerfs /bin
        exit
    fi
    # Create mergerfs mount
    mergerfs $RCLONEUPLOAD:$RCLONEMOUNT $MERGERFSMOUNT -o $MERGERFSOPTIONS
    
    # Check if mergerfs mounted correctly
    if [ -n "$(ls -A $MERGERFSMOUNT)" ]; then
        echo "$(date "+%d/%m/%Y %T") SUCCESS: Check Passed! Your Cloud Drive is mounted"
        echo "==== REMOTE DIRECTORIES ===="
        rclone lsd $REMOTE:
        echo "============================"
    else
        echo "$(date "+%d/%m/%Y %T") ERROR: Check Failed! Your Cloud Drive failed to mount, please check your configuration"
        fusermount -uz $RCLONEMOUNT
        rm -f $LOCKFILE
        echo
        exit
    fi
fi
exit